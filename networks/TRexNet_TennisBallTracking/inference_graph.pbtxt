node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\200?\000\000\000\000"
      }
    }
  }
}
node {
  name: "image_tensor"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: -1
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "image_tensor"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Preprocessor/map/Shape"
  op: "Shape"
  input: "Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/strided_slice"
  op: "StridedSlice"
  input: "Preprocessor/map/Shape"
  input: "Preprocessor/map/strided_slice/stack"
  input: "Preprocessor/map/strided_slice/stack_1"
  input: "Preprocessor/map/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Preprocessor/map/TensorArray"
  op: "TensorArrayV3"
  input: "Preprocessor/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "Preprocessor/map/TensorArrayUnstack/Shape"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_1"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/range"
  op: "Range"
  input: "Preprocessor/map/TensorArrayUnstack/range/start"
  input: "Preprocessor/map/TensorArrayUnstack/strided_slice"
  input: "Preprocessor/map/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Preprocessor/map/TensorArray"
  input: "Preprocessor/map/TensorArrayUnstack/range"
  input: "Cast"
  input: "Preprocessor/map/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Cast"
      }
    }
  }
}
node {
  name: "Preprocessor/map/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArray_1"
  op: "TensorArrayV3"
  input: "Preprocessor/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Preprocessor/map/TensorArray_2"
  op: "TensorArrayV3"
  input: "Preprocessor/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Preprocessor/map/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Enter"
  op: "Enter"
  input: "Preprocessor/map/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Enter_1"
  op: "Enter"
  input: "Preprocessor/map/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Enter_2"
  op: "Enter"
  input: "Preprocessor/map/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Enter_3"
  op: "Enter"
  input: "Preprocessor/map/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Merge"
  op: "Merge"
  input: "Preprocessor/map/while/Enter"
  input: "Preprocessor/map/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/Merge_1"
  op: "Merge"
  input: "Preprocessor/map/while/Enter_1"
  input: "Preprocessor/map/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/Merge_2"
  op: "Merge"
  input: "Preprocessor/map/while/Enter_2"
  input: "Preprocessor/map/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/Merge_3"
  op: "Merge"
  input: "Preprocessor/map/while/Enter_3"
  input: "Preprocessor/map/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/Less"
  op: "Less"
  input: "Preprocessor/map/while/Merge"
  input: "Preprocessor/map/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/Less/Enter"
  op: "Enter"
  input: "Preprocessor/map/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/Less_1"
  op: "Less"
  input: "Preprocessor/map/while/Merge_1"
  input: "Preprocessor/map/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/LogicalAnd"
  op: "LogicalAnd"
  input: "Preprocessor/map/while/Less"
  input: "Preprocessor/map/while/Less_1"
}
node {
  name: "Preprocessor/map/while/LoopCond"
  op: "LoopCond"
  input: "Preprocessor/map/while/LogicalAnd"
}
node {
  name: "Preprocessor/map/while/Switch"
  op: "Switch"
  input: "Preprocessor/map/while/Merge"
  input: "Preprocessor/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/Merge"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Switch_1"
  op: "Switch"
  input: "Preprocessor/map/while/Merge_1"
  input: "Preprocessor/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/Merge_1"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Switch_2"
  op: "Switch"
  input: "Preprocessor/map/while/Merge_2"
  input: "Preprocessor/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/Merge_2"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Switch_3"
  op: "Switch"
  input: "Preprocessor/map/while/Merge_3"
  input: "Preprocessor/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/Merge_3"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/Identity"
  op: "Identity"
  input: "Preprocessor/map/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/Identity_1"
  op: "Identity"
  input: "Preprocessor/map/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/Identity_2"
  op: "Identity"
  input: "Preprocessor/map/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/Identity_3"
  op: "Identity"
  input: "Preprocessor/map/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/add/y"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/add"
  op: "Add"
  input: "Preprocessor/map/while/Identity"
  input: "Preprocessor/map/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "Preprocessor/map/while/TensorArrayReadV3/Enter"
  input: "Preprocessor/map/while/Identity_1"
  input: "Preprocessor/map/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "Preprocessor/map/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "Preprocessor/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/stack"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ",\001\000\000,\001\000\000"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/resize/ExpandDims/dim"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/resize/ExpandDims"
  op: "ExpandDims"
  input: "Preprocessor/map/while/TensorArrayReadV3"
  input: "Preprocessor/map/while/ResizeImage/resize/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "Preprocessor/map/while/ResizeImage/resize/ExpandDims"
  input: "Preprocessor/map/while/ResizeImage/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/resize/Squeeze"
  op: "Squeeze"
  input: "Preprocessor/map/while/ResizeImage/resize/ResizeBilinear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/Shape"
  op: "Shape"
  input: "Preprocessor/map/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/strided_slice/stack"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/strided_slice/stack_1"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/strided_slice/stack_2"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/strided_slice"
  op: "StridedSlice"
  input: "Preprocessor/map/while/ResizeImage/Shape"
  input: "Preprocessor/map/while/ResizeImage/strided_slice/stack"
  input: "Preprocessor/map/while/ResizeImage/strided_slice/stack_1"
  input: "Preprocessor/map/while/ResizeImage/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/strided_slice_1/stack"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/strided_slice_1/stack_1"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/strided_slice_1/stack_2"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/strided_slice_1"
  op: "StridedSlice"
  input: "Preprocessor/map/while/ResizeImage/Shape"
  input: "Preprocessor/map/while/ResizeImage/strided_slice_1/stack"
  input: "Preprocessor/map/while/ResizeImage/strided_slice_1/stack_1"
  input: "Preprocessor/map/while/ResizeImage/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Preprocessor/map/while/ResizeImage/stack_1"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: ",\001\000\000,\001\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "Preprocessor/map/while/Identity_1"
  input: "Preprocessor/map/while/ResizeImage/resize/Squeeze"
  input: "Preprocessor/map/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/ResizeImage/resize/Squeeze"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Preprocessor/map/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/ResizeImage/resize/Squeeze"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Preprocessor/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "Preprocessor/map/while/Identity_1"
  input: "Preprocessor/map/while/ResizeImage/stack_1"
  input: "Preprocessor/map/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/ResizeImage/stack_1"
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Preprocessor/map/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/while/ResizeImage/stack_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Preprocessor/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Preprocessor/map/while/add_1/y"
  op: "Const"
  input: "^Preprocessor/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/while/add_1"
  op: "Add"
  input: "Preprocessor/map/while/Identity_1"
  input: "Preprocessor/map/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/NextIteration"
  op: "NextIteration"
  input: "Preprocessor/map/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/NextIteration_1"
  op: "NextIteration"
  input: "Preprocessor/map/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/NextIteration_2"
  op: "NextIteration"
  input: "Preprocessor/map/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/NextIteration_3"
  op: "NextIteration"
  input: "Preprocessor/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/Exit"
  op: "Exit"
  input: "Preprocessor/map/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/Exit_1"
  op: "Exit"
  input: "Preprocessor/map/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Preprocessor/map/while/Exit_2"
  op: "Exit"
  input: "Preprocessor/map/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/while/Exit_3"
  op: "Exit"
  input: "Preprocessor/map/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Preprocessor/map/TensorArray_1"
  input: "Preprocessor/map/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/range"
  op: "Range"
  input: "Preprocessor/map/TensorArrayStack/range/start"
  input: "Preprocessor/map/TensorArrayStack/TensorArraySizeV3"
  input: "Preprocessor/map/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Preprocessor/map/TensorArray_1"
  input: "Preprocessor/map/TensorArrayStack/range"
  input: "Preprocessor/map/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 300
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Preprocessor/map/TensorArray_2"
  input: "Preprocessor/map/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_2"
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack_1/range"
  op: "Range"
  input: "Preprocessor/map/TensorArrayStack_1/range/start"
  input: "Preprocessor/map/TensorArrayStack_1/TensorArraySizeV3"
  input: "Preprocessor/map/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_2"
      }
    }
  }
}
node {
  name: "Preprocessor/map/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Preprocessor/map/TensorArray_2"
  input: "Preprocessor/map/TensorArrayStack_1/range"
  input: "Preprocessor/map/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Preprocessor/map/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "Preprocessor/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.007843137718737125
      }
    }
  }
}
node {
  name: "Preprocessor/mul"
  op: "Mul"
  input: "Preprocessor/mul/x"
  input: "Preprocessor/map/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Preprocessor/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Preprocessor/sub"
  op: "Sub"
  input: "Preprocessor/mul"
  input: "Preprocessor/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/MobilenetV2/input"
  op: "Identity"
  input: "Preprocessor/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/strided_slice"
  op: "StridedSlice"
  input: "FeatureExtractor/MobilenetV2/MobilenetV2/input"
  input: "FeatureExtractor/MobilenetV2/strided_slice/stack"
  input: "FeatureExtractor/MobilenetV2/strided_slice/stack_1"
  input: "FeatureExtractor/MobilenetV2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 8
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/strided_slice_1"
  op: "StridedSlice"
  input: "FeatureExtractor/MobilenetV2/MobilenetV2/input"
  input: "FeatureExtractor/MobilenetV2/strided_slice_1/stack"
  input: "FeatureExtractor/MobilenetV2/strided_slice_1/stack_1"
  input: "FeatureExtractor/MobilenetV2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 7
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 8
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/stack"
  op: "Pack"
  input: "FeatureExtractor/MobilenetV2/strided_slice"
  input: "FeatureExtractor/MobilenetV2/strided_slice_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv/weights"
  input: "FeatureExtractor/MobilenetV2/Conv/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/Conv/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/Conv/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/MobilenetV2/input"
  input: "FeatureExtractor/MobilenetV2/Conv/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/Conv/Conv2D"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000`\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_1/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\030\000\000\000\220\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\220\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 144
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\220\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 144
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/add"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_2/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\030\000\000\000\220\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\220\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 144
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\220\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 144
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 144
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\220\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 144
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_3/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/add"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_4/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/add"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_5/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 192
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 192
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_6/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\001\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/add"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_7/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\001\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/add"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_8/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\001\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/add"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_9/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\200\001\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 384
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\001\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 384
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 384
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\200\001\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 384
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_10/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000`\000\000\000@\002\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 576
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\002\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 576
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/add"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_11/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000`\000\000\000@\002\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 576
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\002\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 576
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/add"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_12/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000`\000\000\000@\002\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 96
        }
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 576
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 576
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 576
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\002\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 576
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_13/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\240\000\000\000\300\003\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 160
        }
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 960
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\003\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 960
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/add"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_14/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\002\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 2
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_1/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/Conv_1/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/stack"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/Conv_1/Conv2D"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_1/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_2/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/Conv_2/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/Conv_1/Relu6"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/Conv_2/Conv2D"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_2/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_3/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/Conv_3/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/Conv_2/Relu6"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/Conv_3/Conv2D"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_3/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\030\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_4/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/Conv_4/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/Conv_3/Relu6"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/Conv_4/Conv2D"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_4/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\0000\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_5/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/Conv_5/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/Conv_4/Relu6"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 48
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 48
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/Conv_5/Conv2D"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_5/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/concat"
  op: "ConcatV2"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/output"
  input: "FeatureExtractor/MobilenetV2/Conv_5/Relu6"
  input: "FeatureExtractor/MobilenetV2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\320\000\000\000\340\004\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 208
        }
        dim {
          size: 1248
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1248
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1248
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1248
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1248
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1248
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1248
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1248
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1248
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\340\004\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 1248
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\340\004\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1248
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1248
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1248
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1248
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1248
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1248
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1248
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1248
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\340\004\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 1248
        }
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 160
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 160
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_15/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/input"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\240\000\000\000\300\003\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 160
        }
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/input"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/expansion_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 960
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise"
  op: "DepthwiseConv2dNative"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expansion_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 960
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 960
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise_output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/Relu6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\300\003\000\000@\001\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 960
        }
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise_output"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 320
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 320
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/Identity"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/expanded_conv_16/output"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\001\000\000\000\005\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09000000357627869
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal"
  op: "Add"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal/mul"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 320
        }
        dim {
          size: 1280
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/weights/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/weights/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/weights"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "FeatureExtractor/MobilenetV2/Conv_6/kernel/Regularizer/l2_regularizer/scale"
  input: "FeatureExtractor/MobilenetV2/Conv_6/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/output"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1280
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma/Initializer/ones"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma/Initializer/ones/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1280
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1280
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta/Initializer/zeros"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta/Initializer/zeros/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1280
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1280
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1280
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1280
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance/Initializer/ones"
  op: "Fill"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance/Initializer/ones/shape_as_tensor"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1280
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance/Assign"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance/read"
  op: "Identity"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "FeatureExtractor/MobilenetV2/Conv_6/Conv2D"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma/read"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta/read"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean/read"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9997000098228455
      }
    }
  }
}
node {
  name: "FeatureExtractor/MobilenetV2/Conv_6/Relu6"
  op: "Relu6"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expansion_output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Shape_1"
  op: "Shape"
  input: "Preprocessor/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_1"
  op: "StridedSlice"
  input: "Shape_1"
  input: "strided_slice_1/stack"
  input: "strided_slice_1/stack_1"
  input: "strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Cast/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 300
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Cast"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Cast_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 300
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Cast_1"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/Cast_1/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Cast_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Cast_2"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/Cast_2/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/truediv"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/truediv/x"
  input: "MultipleGridAnchorGenerator/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Cast_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Cast_3"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/Cast_3/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/truediv_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/truediv_1"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/truediv_1/x"
  input: "MultipleGridAnchorGenerator/Cast_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul/x"
  input: "MultipleGridAnchorGenerator/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_1"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_1/x"
  input: "MultipleGridAnchorGenerator/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Minimum"
  op: "Minimum"
  input: "MultipleGridAnchorGenerator/Cast"
  input: "MultipleGridAnchorGenerator/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/truediv_2"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/Minimum"
  input: "MultipleGridAnchorGenerator/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/truediv_3"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/Minimum"
  input: "MultipleGridAnchorGenerator/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_2"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/truediv_2"
  input: "MultipleGridAnchorGenerator/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_3"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/truediv_3"
  input: "MultipleGridAnchorGenerator/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\200?\000\000\000@\000\000\000?"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Sqrt"
  op: "Sqrt"
  input: "MultipleGridAnchorGenerator/Sqrt/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/truediv_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\315\314\314=\315\314L>\315\314L>"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/truediv_4"
  op: "RealDiv"
  input: "MultipleGridAnchorGenerator/truediv_4/x"
  input: "MultipleGridAnchorGenerator/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_4"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/truediv_4"
  input: "MultipleGridAnchorGenerator/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\315\314\314=\315\314L>\315\314L>"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_5"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_5/x"
  input: "MultipleGridAnchorGenerator/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_6"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_5"
  input: "MultipleGridAnchorGenerator/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range/start"
  input: "MultipleGridAnchorGenerator/range/limit"
  input: "MultipleGridAnchorGenerator/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Cast_4"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_7"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/Cast_4"
  input: "MultipleGridAnchorGenerator/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_7"
  input: "MultipleGridAnchorGenerator/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_1/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/range_1"
  op: "Range"
  input: "MultipleGridAnchorGenerator/range_1/start"
  input: "MultipleGridAnchorGenerator/range_1/limit"
  input: "MultipleGridAnchorGenerator/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Cast_5"
  op: "Cast"
  input: "MultipleGridAnchorGenerator/range_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_8"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/Cast_5"
  input: "MultipleGridAnchorGenerator/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_1"
  op: "Add"
  input: "MultipleGridAnchorGenerator/mul_8"
  input: "MultipleGridAnchorGenerator/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 19
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/add"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\023\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_6"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_1/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/input"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Rank"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Shape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\023\000\000\000\023\000\000\000"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims"
  op: "ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Rank_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice/begin"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Rank_2"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1"
  op: "Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Shape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ExpandDims"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/ones"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/Slice_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/mul_4"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Tile"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/Meshgrid/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Meshgrid_2/Tile_1"
  op: "Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Reshape_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/ExpandedShape/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Tile_1"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Tile_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/stack_1"
  op: "Pack"
  input: "MultipleGridAnchorGenerator/Meshgrid_2/Tile"
  input: "MultipleGridAnchorGenerator/Meshgrid_1/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\002\000\000\000"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack"
  input: "MultipleGridAnchorGenerator/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\002\000\000\000"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Reshape_1"
  op: "Reshape"
  input: "MultipleGridAnchorGenerator/stack_1"
  input: "MultipleGridAnchorGenerator/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_9"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_9/x"
  input: "MultipleGridAnchorGenerator/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/sub"
  op: "Sub"
  input: "MultipleGridAnchorGenerator/Reshape"
  input: "MultipleGridAnchorGenerator/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_10/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_10"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_10/x"
  input: "MultipleGridAnchorGenerator/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_2"
  op: "Add"
  input: "MultipleGridAnchorGenerator/Reshape"
  input: "MultipleGridAnchorGenerator/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/concat"
  op: "ConcatV2"
  input: "MultipleGridAnchorGenerator/sub"
  input: "MultipleGridAnchorGenerator/add_2"
  input: "MultipleGridAnchorGenerator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1083
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/ones"
  op: "Fill"
  input: "MultipleGridAnchorGenerator/ones/shape_as_tensor"
  input: "MultipleGridAnchorGenerator/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_11/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/mul_11"
  op: "Mul"
  input: "MultipleGridAnchorGenerator/mul_11/x"
  input: "MultipleGridAnchorGenerator/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ";\004\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/strided_slice"
  op: "StridedSlice"
  input: "MultipleGridAnchorGenerator/Shape"
  input: "MultipleGridAnchorGenerator/strided_slice/stack"
  input: "MultipleGridAnchorGenerator/strided_slice/stack_1"
  input: "MultipleGridAnchorGenerator/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/add_3"
  op: "Add"
  input: "MultipleGridAnchorGenerator/add_3/x"
  input: "MultipleGridAnchorGenerator/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1083
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Equal"
  op: "Equal"
  input: "MultipleGridAnchorGenerator/assert_equal/x"
  input: "MultipleGridAnchorGenerator/add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/All"
  op: "All"
  input: "MultipleGridAnchorGenerator/assert_equal/Equal"
  input: "MultipleGridAnchorGenerator/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (MultipleGridAnchorGenerator/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (MultipleGridAnchorGenerator/add_3:0) = "
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x == y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (MultipleGridAnchorGenerator/assert_equal/x:0) = "
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (MultipleGridAnchorGenerator/add_3:0) = "
      }
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert"
  op: "Assert"
  input: "MultipleGridAnchorGenerator/assert_equal/All"
  input: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_0"
  input: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_1"
  input: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_2"
  input: "MultipleGridAnchorGenerator/assert_equal/x"
  input: "MultipleGridAnchorGenerator/assert_equal/Assert/Assert/data_4"
  input: "MultipleGridAnchorGenerator/add_3"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "MultipleGridAnchorGenerator/Identity"
  op: "Identity"
  input: "MultipleGridAnchorGenerator/concat"
  input: "^MultipleGridAnchorGenerator/assert_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Concatenate/concat/concat_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Concatenate/concat"
  op: "Identity"
  input: "MultipleGridAnchorGenerator/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Concatenate/concat_1/concat_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Concatenate/concat_1"
  op: "Identity"
  input: "MultipleGridAnchorGenerator/mul_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BoxEncodingPredictor/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\002\000\000\014\000\000\000"
      }
    }
  }
}
node {
  name: "BoxEncodingPredictor/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BoxEncodingPredictor/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.029999999329447746
      }
    }
  }
}
node {
  name: "BoxEncodingPredictor/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "BoxEncodingPredictor/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "BoxEncodingPredictor/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "BoxEncodingPredictor/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "BoxEncodingPredictor/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxEncodingPredictor/weights/Initializer/truncated_normal"
  op: "Add"
  input: "BoxEncodingPredictor/weights/Initializer/truncated_normal/mul"
  input: "BoxEncodingPredictor/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxEncodingPredictor/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 576
        }
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BoxEncodingPredictor/weights/Assign"
  op: "Assign"
  input: "BoxEncodingPredictor/weights"
  input: "BoxEncodingPredictor/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BoxEncodingPredictor/weights/read"
  op: "Identity"
  input: "BoxEncodingPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/weights"
      }
    }
  }
}
node {
  name: "BoxEncodingPredictor/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "BoxEncodingPredictor/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "BoxEncodingPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BoxEncodingPredictor/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "BoxEncodingPredictor/kernel/Regularizer/l2_regularizer/scale"
  input: "BoxEncodingPredictor/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "BoxEncodingPredictor/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 12
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "BoxEncodingPredictor/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 12
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "BoxEncodingPredictor/biases/Assign"
  op: "Assign"
  input: "BoxEncodingPredictor/biases"
  input: "BoxEncodingPredictor/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "BoxEncodingPredictor/biases/read"
  op: "Identity"
  input: "BoxEncodingPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/biases"
      }
    }
  }
}
node {
  name: "BoxEncodingPredictor/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "BoxEncodingPredictor/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expansion_output"
  input: "BoxEncodingPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "BoxEncodingPredictor/BiasAdd"
  op: "BiasAdd"
  input: "BoxEncodingPredictor/Conv2D"
  input: "BoxEncodingPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Shape_2"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expansion_output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_2"
  op: "StridedSlice"
  input: "Shape_2"
  input: "strided_slice_2/stack"
  input: "strided_slice_2/stack_1"
  input: "strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Reshape/shape/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Reshape/shape"
  op: "Pack"
  input: "strided_slice_2"
  input: "Reshape/shape/1"
  input: "Reshape/shape/2"
  input: "Reshape/shape/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "BoxEncodingPredictor/BiasAdd"
  input: "Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ClassPredictor/weights/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\002\000\000\006\000\000\000"
      }
    }
  }
}
node {
  name: "ClassPredictor/weights/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ClassPredictor/weights/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.029999999329447746
      }
    }
  }
}
node {
  name: "ClassPredictor/weights/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "ClassPredictor/weights/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "ClassPredictor/weights/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "ClassPredictor/weights/Initializer/truncated_normal/TruncatedNormal"
  input: "ClassPredictor/weights/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/weights"
      }
    }
  }
}
node {
  name: "ClassPredictor/weights/Initializer/truncated_normal"
  op: "Add"
  input: "ClassPredictor/weights/Initializer/truncated_normal/mul"
  input: "ClassPredictor/weights/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/weights"
      }
    }
  }
}
node {
  name: "ClassPredictor/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 576
        }
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ClassPredictor/weights/Assign"
  op: "Assign"
  input: "ClassPredictor/weights"
  input: "ClassPredictor/weights/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ClassPredictor/weights/read"
  op: "Identity"
  input: "ClassPredictor/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/weights"
      }
    }
  }
}
node {
  name: "ClassPredictor/kernel/Regularizer/l2_regularizer/scale"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.9999998989515007e-05
      }
    }
  }
}
node {
  name: "ClassPredictor/kernel/Regularizer/l2_regularizer/L2Loss"
  op: "L2Loss"
  input: "ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ClassPredictor/kernel/Regularizer/l2_regularizer"
  op: "Mul"
  input: "ClassPredictor/kernel/Regularizer/l2_regularizer/scale"
  input: "ClassPredictor/kernel/Regularizer/l2_regularizer/L2Loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ClassPredictor/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "ClassPredictor/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "ClassPredictor/biases/Assign"
  op: "Assign"
  input: "ClassPredictor/biases"
  input: "ClassPredictor/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "ClassPredictor/biases/read"
  op: "Identity"
  input: "ClassPredictor/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/biases"
      }
    }
  }
}
node {
  name: "ClassPredictor/dilation_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "ClassPredictor/Conv2D"
  op: "Conv2D"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expansion_output"
  input: "ClassPredictor/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "ClassPredictor/BiasAdd"
  op: "BiasAdd"
  input: "ClassPredictor/Conv2D"
  input: "ClassPredictor/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "Shape_3"
  op: "Shape"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expansion_output"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice_3"
  op: "StridedSlice"
  input: "Shape_3"
  input: "strided_slice_3/stack"
  input: "strided_slice_3/stack_1"
  input: "strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Reshape_1/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Reshape_1/shape/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Reshape_1/shape"
  op: "Pack"
  input: "strided_slice_3"
  input: "Reshape_1/shape/1"
  input: "Reshape_1/shape/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "ClassPredictor/BiasAdd"
  input: "Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "Concatenate/concat"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Tile/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Tile/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Tile/multiples"
  op: "Pack"
  input: "strided_slice_1"
  input: "Tile/multiples/1"
  input: "Tile/multiples/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Tile"
  op: "Tile"
  input: "ExpandDims"
  input: "Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat/concat_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat"
  op: "Identity"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Squeeze"
  op: "Squeeze"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "concat_1/concat_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "concat_1"
  op: "Identity"
  input: "Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/raw_box_encodings"
  op: "Identity"
  input: "Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Shape"
  op: "Shape"
  input: "Postprocessor/raw_box_encodings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/Shape"
  input: "Postprocessor/strided_slice/stack"
  input: "Postprocessor/strided_slice/stack_1"
  input: "Postprocessor/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_1"
  op: "StridedSlice"
  input: "Postprocessor/Shape"
  input: "Postprocessor/strided_slice_1/stack"
  input: "Postprocessor/strided_slice_1/stack_1"
  input: "Postprocessor/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/ExpandDims"
  op: "ExpandDims"
  input: "Concatenate/concat"
  input: "Postprocessor/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Tile/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Tile/multiples/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Tile/multiples"
  op: "Pack"
  input: "Postprocessor/strided_slice"
  input: "Postprocessor/Tile/multiples/1"
  input: "Postprocessor/Tile/multiples/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/Tile"
  op: "Tile"
  input: "Postprocessor/ExpandDims"
  input: "Postprocessor/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\004\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/Reshape"
  op: "Reshape"
  input: "Postprocessor/Tile"
  input: "Postprocessor/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\004\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/Reshape_1"
  op: "Reshape"
  input: "Postprocessor/raw_box_encodings"
  input: "Postprocessor/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose"
  op: "Transpose"
  input: "Postprocessor/Reshape"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack"
  op: "Unpack"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  op: "Sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:3"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:2"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv"
  op: "RealDiv"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/add"
  op: "Add"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv_1"
  op: "RealDiv"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/get_center_coordinates_and_sizes/add_1"
  op: "Add"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/unstack:1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose"
  op: "Transpose"
  input: "Postprocessor/Reshape_1"
  input: "Postprocessor/Decode/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Decode/unstack"
  op: "Unpack"
  input: "Postprocessor/Decode/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10.0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack"
  input: "Postprocessor/Decode/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10.0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_1"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack:1"
  input: "Postprocessor/Decode/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_2"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack:2"
  input: "Postprocessor/Decode/truediv_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 5.0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_3"
  op: "RealDiv"
  input: "Postprocessor/Decode/unstack:3"
  input: "Postprocessor/Decode/truediv_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/Exp"
  op: "Exp"
  input: "Postprocessor/Decode/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul"
  op: "Mul"
  input: "Postprocessor/Decode/Exp"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/Exp_1"
  op: "Exp"
  input: "Postprocessor/Decode/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul_1"
  op: "Mul"
  input: "Postprocessor/Decode/Exp_1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul_2"
  op: "Mul"
  input: "Postprocessor/Decode/truediv"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add"
  op: "Add"
  input: "Postprocessor/Decode/mul_2"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/mul_3"
  op: "Mul"
  input: "Postprocessor/Decode/truediv_1"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add_1"
  op: "Add"
  input: "Postprocessor/Decode/mul_3"
  input: "Postprocessor/Decode/get_center_coordinates_and_sizes/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_4/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_4"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul_1"
  input: "Postprocessor/Decode/truediv_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/sub"
  op: "Sub"
  input: "Postprocessor/Decode/add"
  input: "Postprocessor/Decode/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_5"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul"
  input: "Postprocessor/Decode/truediv_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/sub_1"
  op: "Sub"
  input: "Postprocessor/Decode/add_1"
  input: "Postprocessor/Decode/truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_6/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_6"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul_1"
  input: "Postprocessor/Decode/truediv_6/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add_2"
  op: "Add"
  input: "Postprocessor/Decode/add"
  input: "Postprocessor/Decode/truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/truediv_7"
  op: "RealDiv"
  input: "Postprocessor/Decode/mul"
  input: "Postprocessor/Decode/truediv_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/add_3"
  op: "Add"
  input: "Postprocessor/Decode/add_1"
  input: "Postprocessor/Decode/truediv_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Decode/stack"
  op: "Pack"
  input: "Postprocessor/Decode/sub"
  input: "Postprocessor/Decode/sub_1"
  input: "Postprocessor/Decode/add_2"
  input: "Postprocessor/Decode/add_3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/Decode/transpose_1"
  op: "Transpose"
  input: "Postprocessor/Decode/stack"
  input: "Postprocessor/Decode/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/stack"
  op: "Pack"
  input: "Postprocessor/strided_slice"
  input: "Postprocessor/strided_slice_1"
  input: "Postprocessor/stack/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/Reshape_2"
  op: "Reshape"
  input: "Postprocessor/Decode/transpose_1"
  input: "Postprocessor/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/raw_box_locations"
  op: "Identity"
  input: "Postprocessor/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/ExpandDims_1"
  op: "ExpandDims"
  input: "Postprocessor/raw_box_locations"
  input: "Postprocessor/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/scale_logits/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Postprocessor/scale_logits"
  op: "RealDiv"
  input: "concat_1"
  input: "Postprocessor/scale_logits/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/convert_scores"
  op: "Sigmoid"
  input: "Postprocessor/scale_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/raw_box_scores"
  op: "Identity"
  input: "Postprocessor/convert_scores"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Slice/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\377\377\377\377\377\377\377\377"
      }
    }
  }
}
node {
  name: "Postprocessor/Slice"
  op: "Slice"
  input: "Postprocessor/raw_box_scores"
  input: "Postprocessor/Slice/begin"
  input: "Postprocessor/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/Shape_1"
  op: "Shape"
  input: "Preprocessor/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_2"
  op: "StridedSlice"
  input: "Postprocessor/Shape_1"
  input: "Postprocessor/strided_slice_2/stack"
  input: "Postprocessor/strided_slice_2/stack_1"
  input: "Postprocessor/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/Reshape_3/shape/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/Reshape_3/shape"
  op: "Pack"
  input: "Postprocessor/strided_slice_2"
  input: "Postprocessor/Reshape_3/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/Reshape_3"
  op: "Reshape"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expansion_output"
  input: "Postprocessor/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/concat/concat_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/concat"
  op: "Identity"
  input: "Postprocessor/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/raw_box_features"
  op: "Identity"
  input: "Postprocessor/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1083
      }
    }
  }
}
node {
  name: "Postprocessor/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/range"
  op: "Range"
  input: "Postprocessor/range/start"
  input: "Postprocessor/range/limit"
  input: "Postprocessor/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/ExpandDims_2"
  op: "ExpandDims"
  input: "Postprocessor/range"
  input: "Postprocessor/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/Tile_1/multiples"
  op: "Pack"
  input: "Postprocessor/strided_slice_2"
  input: "Postprocessor/Tile_1/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/Tile_1"
  op: "Tile"
  input: "Postprocessor/ExpandDims_2"
  input: "Postprocessor/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/Cast"
  op: "Cast"
  input: "Postprocessor/Tile_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Postprocessor/Shape_2"
  op: "Shape"
  input: "Preprocessor/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/strided_slice_3"
  op: "StridedSlice"
  input: "Postprocessor/Shape_2"
  input: "Postprocessor/strided_slice_3/stack"
  input: "Postprocessor/strided_slice_3/stack_1"
  input: "Postprocessor/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/Cast_1"
  op: "Cast"
  input: "Preprocessor/map/TensorArrayStack_1/TensorArrayGatherV3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Postprocessor/unstack"
  op: "Unpack"
  input: "Postprocessor/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 3
    }
  }
}
node {
  name: "Postprocessor/Cast_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 300
      }
    }
  }
}
node {
  name: "Postprocessor/Cast_2"
  op: "Cast"
  input: "Postprocessor/Cast_2/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Postprocessor/Cast_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 300
      }
    }
  }
}
node {
  name: "Postprocessor/Cast_3"
  op: "Cast"
  input: "Postprocessor/Cast_3/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Postprocessor/zeros_like"
  op: "ZerosLike"
  input: "Postprocessor/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/zeros_like_1"
  op: "ZerosLike"
  input: "Postprocessor/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/truediv"
  op: "RealDiv"
  input: "Postprocessor/unstack"
  input: "Postprocessor/Cast_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/truediv_1"
  op: "RealDiv"
  input: "Postprocessor/unstack:1"
  input: "Postprocessor/Cast_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/stack_1"
  op: "Pack"
  input: "Postprocessor/zeros_like"
  input: "Postprocessor/zeros_like_1"
  input: "Postprocessor/truediv"
  input: "Postprocessor/truediv_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/Shape"
  op: "Shape"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/Shape_1"
  op: "Shape"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/Shape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/Less"
  op: "Less"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/packed"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/ones"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/packed"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/mul"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/ones"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/stack/2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/stack/4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/stack"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/strided_slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/stack/2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/stack/3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/stack/4"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/zeros"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Shape"
  op: "Shape"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_2"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/range"
  input: "Postprocessor/ExpandDims_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/ExpandDims_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/Shape"
  op: "Shape"
  input: "Postprocessor/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/range"
  input: "Postprocessor/Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/Slice"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/zeros"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/zeros"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/Shape"
  op: "Shape"
  input: "Postprocessor/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/range"
  input: "Postprocessor/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/stack_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/Shape"
  op: "Shape"
  input: "Postprocessor/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/range"
  input: "Postprocessor/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/Cast"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/Shape"
  op: "Shape"
  input: "Postprocessor/convert_scores"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/range"
  input: "Postprocessor/convert_scores"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/convert_scores"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/mul"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/mul"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_10"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_11"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_12"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_13"
  op: "TensorArrayV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/iteration_counter"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/iteration_counter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_2"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_3"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_4"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_5"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_10:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_6"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_11:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_7"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_12:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_8"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_13:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_1"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_2"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_3"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_4"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_5"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_6"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_7"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_8"
  op: "Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Enter_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less"
  op: "Less"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less_1"
  op: "Less"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LogicalAnd"
  op: "LogicalAnd"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Less_1"
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  op: "LoopCond"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LogicalAnd"
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_1"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_2"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_2"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_3"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_3"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_4"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_4"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_5"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_5"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_6"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_6"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_7"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_7"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_8"
  op: "Switch"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Merge_8"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_2"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_3"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_4"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_5"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_6"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_7"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_8"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_8:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_2"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_2/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_2/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_2/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_2/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_2/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_3/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_4"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_4/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_5"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_5/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_5/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_5/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_5"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_5/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_5/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_6"
  op: "TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_6/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_6/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_6/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_6"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_6/Enter_1"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayUnstack_6/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack/2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\004\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_2/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_2/2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_2/3"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_2"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_2/1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_2/2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_2/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_2/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_2"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_2/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_2/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_2"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_3"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_6"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_3/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_3"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_3/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_3/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_3"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_4/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_4"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_4/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_4/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_4"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_4/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/stack_4"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_4/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\002\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_4"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Slice_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  op: "Unpack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack_1"
  op: "Unpack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
  attr {
    key: "num"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack/1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice/begin"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice/begin"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_1"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/iou_threshold"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/score_threshold"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/NonMaxSuppressionV3"
  op: "NonMaxSuppressionV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/iou_threshold"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/score_threshold"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_2"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/NonMaxSuppressionV3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros/Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/non_max_suppression/NonMaxSuppressionV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_1/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_1"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_3/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_3"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_4/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_4"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Reshape_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_4/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_5/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_5"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/unstack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_5/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/start"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/delta"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Less"
  op: "Less"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones/Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/mul/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/mul"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/mul/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Less"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Const"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros_like"
  op: "ZerosLike"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add_1/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add_1"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/zeros_like"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat/concat_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_1/concat_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_1"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_2/concat_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_2"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3/concat_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_4/concat_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_4"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather/GatherV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_5/concat_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_5"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Size"
  op: "Size"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Equal"
  op: "Equal"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Incorrect field size: actual vs expected."
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert/data_0"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Incorrect field size: actual vs expected."
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert"
  op: "Assert"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Equal"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert/data_0"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Size"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2"
  op: "TopKV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/strided_slice"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "sorted"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_1/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_1"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_3/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_3"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_4/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_4"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_4/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_5/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_5"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_5/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_6/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_6"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Concatenate/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_6/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split/split_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split"
  op: "Split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split/split_dim"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack"
  op: "Unpack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_1"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split:2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_1"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_2"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_2"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_3"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/split:3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_3"
  op: "Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Minimum_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/unstack:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Maximum_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split/split_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split"
  op: "Split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split/split_dim"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split:2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub_1"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split:3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/mul"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/Squeeze"
  op: "Squeeze"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Area/Squeeze"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Where"
  op: "Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Greater"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Where"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Reshape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_1/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_1"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_3/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_3"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_4/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_4"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_4/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_5/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_5"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField/Gather/GatherV2_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_5/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_6/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_6"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_6/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_3"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/split/split_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/split"
  op: "Split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/split/split_dim"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/split:2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/sub_1"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/split:3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/mul"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/Squeeze"
  op: "Squeeze"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Cast"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Area/Squeeze"
  attr {
    key: "DstT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones_1/Reshape/shape"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones_1/Reshape"
  op: "Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones_1/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones_1"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones_1/Reshape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/mul_1/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -1.0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/mul_1"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/mul_1/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ones_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select_1"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/GreaterEqual/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/GreaterEqual"
  op: "GreaterEqual"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Cast_1"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Const_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Sum"
  op: "Sum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Cast_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Size"
  op: "Size"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Equal"
  op: "Equal"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Assert/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Incorrect field size: actual vs expected."
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Assert/Assert/data_0"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Incorrect field size: actual vs expected."
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Assert/Assert"
  op: "Assert"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Equal"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Assert/Assert/data_0"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Size"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/strided_slice"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/TopKV2"
  op: "TopKV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/strided_slice"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "sorted"
    value {
      b: true
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_1/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_1"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_3/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_3"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_4/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_4"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_4/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_5/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_5"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_5/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_6/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_6"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ClipToWindow/Gather/GatherV2_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/TopKV2:1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_6/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_1/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_1/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_1/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_1"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_1/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_1/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_2/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_2/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_2/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_2"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_2/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_2/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_3/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_3/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_3/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_3"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_3/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_3/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/sub_1"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_4/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_4/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_4/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_4"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_4/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_4/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_5/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_5/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_5/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_5"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_5/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_5/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_6/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_6/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_6/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_6"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_6/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_6/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_7/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_7/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_7/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_7"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayReadV3_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_7/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_7/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/sub_2/y"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/strided_slice_7"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/sub_2"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/truediv/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/truediv"
  op: "RealDiv"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/truediv/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/truediv_1/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/truediv_1"
  op: "RealDiv"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/truediv_1/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/split/split_dim"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/split"
  op: "Split"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/split/split_dim"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/mul"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/truediv"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/mul_1"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/truediv"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/split:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/mul_2"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/truediv_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/mul_3"
  op: "Mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/truediv_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/concat/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/concat"
  op: "ConcatV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/mul"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/mul_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/mul_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/mul_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_4"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Shape_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1"
  op: "Minimum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1/start"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1/delta"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_1/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_1"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_3/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_3"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_4/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_4"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_4/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_5/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_5"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/SortByField_1/Gather/GatherV2_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_5/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_6/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_6"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/ChangeCoordinateFrame/Scale/concat"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_6/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Sum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select_2"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Sum"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Minimum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2/start"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2/delta"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_1/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_1"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_2/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_2"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_3/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_3"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_3/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_4/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_4"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_4/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_5/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_5"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_5/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_6/axis"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_6"
  op: "GatherV2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_1/GatherV2_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/range_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_6/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_1/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_1"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice/size"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_1"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_2/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_2"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_2/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_3/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_3"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_3/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack/values_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack/values_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad"
  op: "Pad"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_2"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_4/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_4"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_2/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_2"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_1/size"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_1"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_3"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_5/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_5"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_5/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_1/values_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_5"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_1/values_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_1"
  op: "Pad"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_4"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_6/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_6/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_6/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_6"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_6/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_6/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_6/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_6"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_6/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_3/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_3"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_3/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_3/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_3"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_3/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_3/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_7/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_7/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_7/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_7"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_7/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_7/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_7/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_7"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_7/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_4/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_4"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_4/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_4/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_4"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_4/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_4/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_8/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_8/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_8/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_8"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_8/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_8/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_8/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_8"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_5/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_5"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_5/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_5/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_5/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_5"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_5/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_5/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_4/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_4/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_4"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_4/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_4/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_2/size"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_5"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_2"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_5"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_9/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_9/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_9/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_9"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_9/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_9/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_9/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_9"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_9/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_10/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_10/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_10/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_10"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_10/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_10/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_10/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_10"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_10/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_11/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_11/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_11/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_11"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_11/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_11/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_11/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_11"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_11/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_5/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_5/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_5"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_5/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_2/values_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_9"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_10"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_11"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_2"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_2/values_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_2"
  op: "Pad"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_6"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_12/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_12"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_12"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_12/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_6/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_6"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_12"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_6/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_3/size"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_6"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_3"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_6"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_3/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_7"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_13/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_13"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_13/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_13"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_3/values_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_13"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_3"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_3/values_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_3"
  op: "Pad"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_8"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_14/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_14/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_14/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_14"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_14/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_14/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_14/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_14/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_14"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_14"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_14/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_7/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_7"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_14"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_7/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_7/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_7/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_7"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_7/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_7/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_15/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_15/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_15/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_15"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_15/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_15/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_15/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_15/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_15"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_15"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_15/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_8/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_8"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_15"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_8/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_8/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_8"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_8/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_8/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_8/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_8/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_8"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_8/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_4/size"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_4"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_4/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_9"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_16/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_16/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_16/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_16"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_9"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_16/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_16/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_16/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_16/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_16"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_16/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_16"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_17/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_17/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_17/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_17"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_9"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_17/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_17/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_17/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_17/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_17"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_17/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_17"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_9/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_9/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_9"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_9/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_4/values_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_16"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_17"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_4"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_9"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_4/values_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_4"
  op: "Pad"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_10"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_18/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_18/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_18/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_18"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_10"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_18/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_18/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_18/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_18/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_18"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_18"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_18/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_9/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_9"
  op: "Greater"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_18"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_9/t"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_9/e"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_9"
  op: "Select"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Greater_9"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_9/t"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_9/e"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_10/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_10/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_10"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_10/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_5/size"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Select_9"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_5"
  op: "Slice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Gather_2/GatherV2_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_10"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_5/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_11"
  op: "Shape"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_19/stack"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_19/stack_1"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_19/stack_2"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_19"
  op: "StridedSlice"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Shape_11"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_19/stack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_19/stack_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_19/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_19/x"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 100
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_19"
  op: "Sub"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_19/x"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/strided_slice_19"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_11/shape_as_tensor"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_11/Const"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_11"
  op: "Fill"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_11/shape_as_tensor"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_5/values_1"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/sub_19"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_5"
  op: "Pack"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/zeros_11"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_5/values_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 1
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_5"
  op: "Pad"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Slice_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/stack_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_1"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_5"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_5"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_3/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_3/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_2"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_3/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_10"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_3"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_11"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_5/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_5/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_4"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_4"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_5/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_12"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/PadOrClipBoxList/Pad_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_6/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_6/TensorArrayWriteV3/Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select_2"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select_2"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_6/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_13"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/while/MultiClassNonMaxSuppression/Select_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add_1/y"
  op: "Const"
  input: "^Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add_1"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Identity_1"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_1"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_2"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_3"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_4"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_2/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_5"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_3/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_6"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_4/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_7"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_5/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/NextIteration_8"
  op: "NextIteration"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/TensorArrayWrite_6/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_1"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_2"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_3"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_4"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_5"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_6"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_7"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_8"
  op: "Exit"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 4
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_3/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_10"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_10"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_3/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_3/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_3/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_3/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_3/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_10"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_3/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_10"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_3/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_11"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_11"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_11"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_11"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_5/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_12"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_12"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_5/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_5/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_5/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_5/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_5/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_5/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_12"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_5/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_12"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_5/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_12"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 100
        }
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_6/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_13"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_13"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_6/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_6/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_6/range"
  op: "Range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_6/range/start"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_6/TensorArraySizeV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_6/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_13"
      }
    }
  }
}
node {
  name: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_6/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_13"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_6/range"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/while/Exit_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArray_13"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "Postprocessor/Cast_4"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_6/TensorArrayGatherV3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Postprocessor/Squeeze"
  op: "Squeeze"
  input: "Postprocessor/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 2
      }
    }
  }
}
node {
  name: "Postprocessor/Cast_5"
  op: "Cast"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_4/TensorArrayGatherV3"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_2/TensorArrayGatherV3"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "detection_boxes"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "detection_scores"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_1/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "detection_multiclass_scores"
  op: "Identity"
  input: "Postprocessor/BatchMultiClassNonMaxSuppression/map/TensorArrayStack_5/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "detection_classes"
  op: "Identity"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "num_detections"
  op: "Identity"
  input: "Postprocessor/Cast_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "raw_detection_boxes"
  op: "Identity"
  input: "Postprocessor/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "raw_detection_scores"
  op: "Identity"
  input: "Postprocessor/convert_scores"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 290
          }
        }
        string_val: "BoxEncodingPredictor/biases"
        string_val: "BoxEncodingPredictor/weights"
        string_val: "ClassPredictor/biases"
        string_val: "ClassPredictor/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_1/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_2/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_3/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_4/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_5/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_6/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 290
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "BoxEncodingPredictor/biases"
  input: "BoxEncodingPredictor/weights"
  input: "ClassPredictor/biases"
  input: "ClassPredictor/weights"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
  input: "global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 290
          }
        }
        string_val: "BoxEncodingPredictor/biases"
        string_val: "BoxEncodingPredictor/weights"
        string_val: "ClassPredictor/biases"
        string_val: "ClassPredictor/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_1/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_2/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_3/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_4/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_5/weights"
        string_val: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/Conv_6/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
        string_val: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 290
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "BoxEncodingPredictor/biases"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "BoxEncodingPredictor/weights"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BoxEncodingPredictor/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "ClassPredictor/biases"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "ClassPredictor/weights"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@ClassPredictor/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv/weights"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_1/weights"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_2/weights"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_3/weights"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_4/weights"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_5/weights"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/Conv_6/weights"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/Conv_6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_1/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_69"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_70"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_71"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_72"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_73"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
  input: "save/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_74"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
  input: "save/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_75"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
  input: "save/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_76"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_77"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_78"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
  input: "save/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_10/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_79"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_80"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_81"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_82"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_83"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
  input: "save/RestoreV2:83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_84"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
  input: "save/RestoreV2:84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_85"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
  input: "save/RestoreV2:85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_86"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_87"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_88"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
  input: "save/RestoreV2:88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_89"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
  input: "save/RestoreV2:89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_90"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
  input: "save/RestoreV2:90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_91"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_92"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_93"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
  input: "save/RestoreV2:93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_11/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_94"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_95"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_96"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_97"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_98"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
  input: "save/RestoreV2:98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_99"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
  input: "save/RestoreV2:99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_100"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
  input: "save/RestoreV2:100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_101"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_102"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_103"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
  input: "save/RestoreV2:103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_104"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
  input: "save/RestoreV2:104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_105"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
  input: "save/RestoreV2:105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_106"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_107"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_108"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
  input: "save/RestoreV2:108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_12/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_109"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_110"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_111"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_112"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_113"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
  input: "save/RestoreV2:113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_114"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
  input: "save/RestoreV2:114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_115"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
  input: "save/RestoreV2:115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_116"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_117"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_118"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
  input: "save/RestoreV2:118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_119"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
  input: "save/RestoreV2:119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_120"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
  input: "save/RestoreV2:120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_121"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_122"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_123"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
  input: "save/RestoreV2:123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_13/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_124"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_125"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_126"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_127"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_128"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
  input: "save/RestoreV2:128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_129"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
  input: "save/RestoreV2:129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_130"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
  input: "save/RestoreV2:130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_131"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_132"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_133"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
  input: "save/RestoreV2:133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_134"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
  input: "save/RestoreV2:134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_135"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
  input: "save/RestoreV2:135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_136"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_137"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_138"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
  input: "save/RestoreV2:138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_14/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_139"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_140"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_141"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_142"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_143"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
  input: "save/RestoreV2:143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_144"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
  input: "save/RestoreV2:144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_145"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
  input: "save/RestoreV2:145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_146"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_147"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_148"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
  input: "save/RestoreV2:148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_149"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
  input: "save/RestoreV2:149"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_150"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
  input: "save/RestoreV2:150"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_151"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:151"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_152"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:152"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_153"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
  input: "save/RestoreV2:153"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_15/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_154"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_155"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:155"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_156"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:156"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_157"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_158"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
  input: "save/RestoreV2:158"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_159"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
  input: "save/RestoreV2:159"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_160"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
  input: "save/RestoreV2:160"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_161"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:161"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_162"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:162"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_163"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
  input: "save/RestoreV2:163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_164"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
  input: "save/RestoreV2:164"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_165"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
  input: "save/RestoreV2:165"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_166"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:166"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_167"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:167"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_168"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
  input: "save/RestoreV2:168"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_16/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_169"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_170"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:170"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_171"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:171"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_172"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_173"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
  input: "save/RestoreV2:173"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_174"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
  input: "save/RestoreV2:174"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_175"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
  input: "save/RestoreV2:175"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_176"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:176"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_177"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:177"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_178"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
  input: "save/RestoreV2:178"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_179"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
  input: "save/RestoreV2:179"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_180"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
  input: "save/RestoreV2:180"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_181"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:181"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_182"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:182"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_183"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
  input: "save/RestoreV2:183"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_2/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_184"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:184"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_185"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:185"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_186"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:186"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_187"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:187"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_188"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
  input: "save/RestoreV2:188"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_189"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
  input: "save/RestoreV2:189"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_190"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
  input: "save/RestoreV2:190"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_191"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:191"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_192"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:192"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_193"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
  input: "save/RestoreV2:193"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_194"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
  input: "save/RestoreV2:194"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_195"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
  input: "save/RestoreV2:195"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_196"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:196"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_197"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:197"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_198"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
  input: "save/RestoreV2:198"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_3/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_199"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:199"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_200"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:200"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_201"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:201"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_202"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:202"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_203"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
  input: "save/RestoreV2:203"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_204"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
  input: "save/RestoreV2:204"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_205"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
  input: "save/RestoreV2:205"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_206"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:206"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_207"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:207"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_208"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
  input: "save/RestoreV2:208"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_209"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
  input: "save/RestoreV2:209"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_210"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
  input: "save/RestoreV2:210"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_211"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:211"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_212"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:212"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_213"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
  input: "save/RestoreV2:213"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_4/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_214"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:214"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_215"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:215"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_216"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:216"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_217"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:217"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_218"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
  input: "save/RestoreV2:218"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_219"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
  input: "save/RestoreV2:219"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_220"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
  input: "save/RestoreV2:220"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_221"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:221"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_222"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:222"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_223"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
  input: "save/RestoreV2:223"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_224"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
  input: "save/RestoreV2:224"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_225"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
  input: "save/RestoreV2:225"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_226"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:226"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_227"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:227"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_228"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
  input: "save/RestoreV2:228"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_5/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_229"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:229"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_230"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:230"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_231"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:231"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_232"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:232"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_233"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
  input: "save/RestoreV2:233"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_234"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
  input: "save/RestoreV2:234"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_235"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
  input: "save/RestoreV2:235"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_236"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:236"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_237"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:237"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_238"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
  input: "save/RestoreV2:238"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_239"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
  input: "save/RestoreV2:239"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_240"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
  input: "save/RestoreV2:240"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_241"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:241"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_242"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:242"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_243"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
  input: "save/RestoreV2:243"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_6/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_244"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:244"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_245"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:245"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_246"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:246"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_247"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:247"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_248"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
  input: "save/RestoreV2:248"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_249"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
  input: "save/RestoreV2:249"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_250"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
  input: "save/RestoreV2:250"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_251"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:251"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_252"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:252"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_253"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
  input: "save/RestoreV2:253"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_254"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
  input: "save/RestoreV2:254"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_255"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
  input: "save/RestoreV2:255"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_256"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:256"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_257"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:257"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_258"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
  input: "save/RestoreV2:258"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_7/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_259"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:259"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_260"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:260"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_261"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:261"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_262"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:262"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_263"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
  input: "save/RestoreV2:263"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_264"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
  input: "save/RestoreV2:264"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_265"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
  input: "save/RestoreV2:265"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_266"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:266"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_267"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:267"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_268"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
  input: "save/RestoreV2:268"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_269"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
  input: "save/RestoreV2:269"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_270"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
  input: "save/RestoreV2:270"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_271"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:271"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_272"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:272"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_273"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
  input: "save/RestoreV2:273"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_8/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_274"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
  input: "save/RestoreV2:274"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_275"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
  input: "save/RestoreV2:275"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_276"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
  input: "save/RestoreV2:276"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_277"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
  input: "save/RestoreV2:277"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_278"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
  input: "save/RestoreV2:278"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/depthwise/depthwise_weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_279"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
  input: "save/RestoreV2:279"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_280"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
  input: "save/RestoreV2:280"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_281"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
  input: "save/RestoreV2:281"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_282"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
  input: "save/RestoreV2:282"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_283"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
  input: "save/RestoreV2:283"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/expand/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_284"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
  input: "save/RestoreV2:284"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_285"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
  input: "save/RestoreV2:285"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_286"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
  input: "save/RestoreV2:286"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_287"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
  input: "save/RestoreV2:287"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/BatchNorm/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_288"
  op: "Assign"
  input: "FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
  input: "save/RestoreV2:288"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@FeatureExtractor/MobilenetV2/expanded_conv_9/project/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_289"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:289"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_100"
  input: "^save/Assign_101"
  input: "^save/Assign_102"
  input: "^save/Assign_103"
  input: "^save/Assign_104"
  input: "^save/Assign_105"
  input: "^save/Assign_106"
  input: "^save/Assign_107"
  input: "^save/Assign_108"
  input: "^save/Assign_109"
  input: "^save/Assign_11"
  input: "^save/Assign_110"
  input: "^save/Assign_111"
  input: "^save/Assign_112"
  input: "^save/Assign_113"
  input: "^save/Assign_114"
  input: "^save/Assign_115"
  input: "^save/Assign_116"
  input: "^save/Assign_117"
  input: "^save/Assign_118"
  input: "^save/Assign_119"
  input: "^save/Assign_12"
  input: "^save/Assign_120"
  input: "^save/Assign_121"
  input: "^save/Assign_122"
  input: "^save/Assign_123"
  input: "^save/Assign_124"
  input: "^save/Assign_125"
  input: "^save/Assign_126"
  input: "^save/Assign_127"
  input: "^save/Assign_128"
  input: "^save/Assign_129"
  input: "^save/Assign_13"
  input: "^save/Assign_130"
  input: "^save/Assign_131"
  input: "^save/Assign_132"
  input: "^save/Assign_133"
  input: "^save/Assign_134"
  input: "^save/Assign_135"
  input: "^save/Assign_136"
  input: "^save/Assign_137"
  input: "^save/Assign_138"
  input: "^save/Assign_139"
  input: "^save/Assign_14"
  input: "^save/Assign_140"
  input: "^save/Assign_141"
  input: "^save/Assign_142"
  input: "^save/Assign_143"
  input: "^save/Assign_144"
  input: "^save/Assign_145"
  input: "^save/Assign_146"
  input: "^save/Assign_147"
  input: "^save/Assign_148"
  input: "^save/Assign_149"
  input: "^save/Assign_15"
  input: "^save/Assign_150"
  input: "^save/Assign_151"
  input: "^save/Assign_152"
  input: "^save/Assign_153"
  input: "^save/Assign_154"
  input: "^save/Assign_155"
  input: "^save/Assign_156"
  input: "^save/Assign_157"
  input: "^save/Assign_158"
  input: "^save/Assign_159"
  input: "^save/Assign_16"
  input: "^save/Assign_160"
  input: "^save/Assign_161"
  input: "^save/Assign_162"
  input: "^save/Assign_163"
  input: "^save/Assign_164"
  input: "^save/Assign_165"
  input: "^save/Assign_166"
  input: "^save/Assign_167"
  input: "^save/Assign_168"
  input: "^save/Assign_169"
  input: "^save/Assign_17"
  input: "^save/Assign_170"
  input: "^save/Assign_171"
  input: "^save/Assign_172"
  input: "^save/Assign_173"
  input: "^save/Assign_174"
  input: "^save/Assign_175"
  input: "^save/Assign_176"
  input: "^save/Assign_177"
  input: "^save/Assign_178"
  input: "^save/Assign_179"
  input: "^save/Assign_18"
  input: "^save/Assign_180"
  input: "^save/Assign_181"
  input: "^save/Assign_182"
  input: "^save/Assign_183"
  input: "^save/Assign_184"
  input: "^save/Assign_185"
  input: "^save/Assign_186"
  input: "^save/Assign_187"
  input: "^save/Assign_188"
  input: "^save/Assign_189"
  input: "^save/Assign_19"
  input: "^save/Assign_190"
  input: "^save/Assign_191"
  input: "^save/Assign_192"
  input: "^save/Assign_193"
  input: "^save/Assign_194"
  input: "^save/Assign_195"
  input: "^save/Assign_196"
  input: "^save/Assign_197"
  input: "^save/Assign_198"
  input: "^save/Assign_199"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_200"
  input: "^save/Assign_201"
  input: "^save/Assign_202"
  input: "^save/Assign_203"
  input: "^save/Assign_204"
  input: "^save/Assign_205"
  input: "^save/Assign_206"
  input: "^save/Assign_207"
  input: "^save/Assign_208"
  input: "^save/Assign_209"
  input: "^save/Assign_21"
  input: "^save/Assign_210"
  input: "^save/Assign_211"
  input: "^save/Assign_212"
  input: "^save/Assign_213"
  input: "^save/Assign_214"
  input: "^save/Assign_215"
  input: "^save/Assign_216"
  input: "^save/Assign_217"
  input: "^save/Assign_218"
  input: "^save/Assign_219"
  input: "^save/Assign_22"
  input: "^save/Assign_220"
  input: "^save/Assign_221"
  input: "^save/Assign_222"
  input: "^save/Assign_223"
  input: "^save/Assign_224"
  input: "^save/Assign_225"
  input: "^save/Assign_226"
  input: "^save/Assign_227"
  input: "^save/Assign_228"
  input: "^save/Assign_229"
  input: "^save/Assign_23"
  input: "^save/Assign_230"
  input: "^save/Assign_231"
  input: "^save/Assign_232"
  input: "^save/Assign_233"
  input: "^save/Assign_234"
  input: "^save/Assign_235"
  input: "^save/Assign_236"
  input: "^save/Assign_237"
  input: "^save/Assign_238"
  input: "^save/Assign_239"
  input: "^save/Assign_24"
  input: "^save/Assign_240"
  input: "^save/Assign_241"
  input: "^save/Assign_242"
  input: "^save/Assign_243"
  input: "^save/Assign_244"
  input: "^save/Assign_245"
  input: "^save/Assign_246"
  input: "^save/Assign_247"
  input: "^save/Assign_248"
  input: "^save/Assign_249"
  input: "^save/Assign_25"
  input: "^save/Assign_250"
  input: "^save/Assign_251"
  input: "^save/Assign_252"
  input: "^save/Assign_253"
  input: "^save/Assign_254"
  input: "^save/Assign_255"
  input: "^save/Assign_256"
  input: "^save/Assign_257"
  input: "^save/Assign_258"
  input: "^save/Assign_259"
  input: "^save/Assign_26"
  input: "^save/Assign_260"
  input: "^save/Assign_261"
  input: "^save/Assign_262"
  input: "^save/Assign_263"
  input: "^save/Assign_264"
  input: "^save/Assign_265"
  input: "^save/Assign_266"
  input: "^save/Assign_267"
  input: "^save/Assign_268"
  input: "^save/Assign_269"
  input: "^save/Assign_27"
  input: "^save/Assign_270"
  input: "^save/Assign_271"
  input: "^save/Assign_272"
  input: "^save/Assign_273"
  input: "^save/Assign_274"
  input: "^save/Assign_275"
  input: "^save/Assign_276"
  input: "^save/Assign_277"
  input: "^save/Assign_278"
  input: "^save/Assign_279"
  input: "^save/Assign_28"
  input: "^save/Assign_280"
  input: "^save/Assign_281"
  input: "^save/Assign_282"
  input: "^save/Assign_283"
  input: "^save/Assign_284"
  input: "^save/Assign_285"
  input: "^save/Assign_286"
  input: "^save/Assign_287"
  input: "^save/Assign_288"
  input: "^save/Assign_289"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_69"
  input: "^save/Assign_7"
  input: "^save/Assign_70"
  input: "^save/Assign_71"
  input: "^save/Assign_72"
  input: "^save/Assign_73"
  input: "^save/Assign_74"
  input: "^save/Assign_75"
  input: "^save/Assign_76"
  input: "^save/Assign_77"
  input: "^save/Assign_78"
  input: "^save/Assign_79"
  input: "^save/Assign_8"
  input: "^save/Assign_80"
  input: "^save/Assign_81"
  input: "^save/Assign_82"
  input: "^save/Assign_83"
  input: "^save/Assign_84"
  input: "^save/Assign_85"
  input: "^save/Assign_86"
  input: "^save/Assign_87"
  input: "^save/Assign_88"
  input: "^save/Assign_89"
  input: "^save/Assign_9"
  input: "^save/Assign_90"
  input: "^save/Assign_91"
  input: "^save/Assign_92"
  input: "^save/Assign_93"
  input: "^save/Assign_94"
  input: "^save/Assign_95"
  input: "^save/Assign_96"
  input: "^save/Assign_97"
  input: "^save/Assign_98"
  input: "^save/Assign_99"
}
versions {
  producer: 38
}
